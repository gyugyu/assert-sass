@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';
@use 'sass:string';

@function equals($expected, $actual) {
  @if $expected != $actual {
    $this-selector: &;

    @error '#{$this-selector}: assert-equal failed. expected: #{-stringify($expected)} actual: #{-stringify($actual)}';
  }

  @return 0;
}

@function not-null($value) {
  @if $value == null {
    $this-selector: &;
    @error '#{$this-selector}: assert-not-null failed.';
  }

  @return 0;
}

@function contains-all-keys($map, $keys) {
  $keys-not-contained: [];

  @each $key in $keys {
    @if not map.has-key($map, $key) {
      $keys-not-contained: list.append($keys-not-contained, $key);
    }
  }

  @if list.length($keys-not-contained) > 0 {
    $this-selector: &;
    @error '#{$this-selector}: keys #{$keys-not-contained} are not contained.';
  }

  @return 0;
}

@function fail($message) {
  $this-selector: &;
  @error '#{$this-selector}: #{$message}';
  @return 0;
}

@function -stringify($value) {
  @if meta.type-of($value) == map {
    $str: '(';
    $keys: map.keys($value);
    $len: list.length($keys);

    @for $i from 1 through $len {
      $k: list.nth($keys, $i);
      $v: map.get($value, $k);
      $str: $str + '#{$k}: #{-stringify($v)}';

      @if $i != $len {
        $str: $str + ', ';
      }
    }

    @return $str + ')';
  }

  @return $value;
}
